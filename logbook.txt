# Zoo Simulation LogBook

## Story #1

To store informations about Plants/Animals, I wanted to use dataclass structure first but after a little more reflexion, I prefer
to create an abstract class that will be heritated by Plant and Animal classes

Even if the US1 doesn't ask to implement an initialization method in paddock, I think it's a good idea to write an initialization method
into the paddock class

In the same reasoning, I write a run_simulation method in paddock class.

To allow pytest check for simulation output, I create a create_report method in Paddock. This method return the report into a string.
During execution (not in testing mode), and_one_more_day method call create_report and print the result on the standard output.

## Story #2

I create Carnivorous, Herbivore abstract classes and Lion/Tiger/Coyote/Elephant/Giraffe/Antelope classes to hold biodiversity informations.
I also add two new methods :
- can_eat method to check if LivingEntity can eat other LivingEntity
- eat method to really do the eat action

Paddock.initialization method has been updated to allow Lion/Tiger/Coyote/Elephant/Giraffe/Antelope addition.
Adding specific error message in Paddock.run_simulation method when user enter negativ integer or to big integer (1095).

Merge instantiation and representation tests into one only test
Adding a lot of tests to cover all part of the code

## Story #3

Adding _is_alive attribute in LivingEntity. This attribute will be get using property is_alive (I prefer to old an information instead of remove eaten LivingEntity 
because in the next story we will introduce life point).
Adding gets_eaten method in LivingEntity. This method will be call when the current LivingEntity will be eaten by another LivingEntity
Change organization for eat method (that is now in Animal abstract class)
can_eat method is now define in all standard (not abstract) classes

Even if story doesn't give this information, I add an additional test in can_eat method to check if other_living_entity is alive

Update __repr__ method in Animal and Plant class to add emoji about is_alive information

Adding do_actions method in LivingEntity (abstract method). The method is implemented in Animal and Plant classes

Change line for Plant in create_report method (in order to count dead/alive plant separately)

Improve unit tests to manage dead/alive emoji in __repr__

Adding 3 tests to check non autophagy / animal cannot eat same species / animal cannot eat dead entity