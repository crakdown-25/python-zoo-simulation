# Zoo Simulation LogBook

## Story #1

To store informations about Plants/Animals, I wanted to use dataclass structure first but after a little more reflexion, I prefer
to create an abstract class that will be heritated by Plant and Animal classes

Even if the US1 doesn't ask to implement an initialization method in paddock, I think it's a good idea to write an initialization method
into the paddock class

In the same reasoning, I write a run_simulation method in paddock class.

To allow pytest check for simulation output, I create a create_report method in Paddock. This method return the report into a string.
During execution (not in testing mode), and_one_more_day method call create_report and print the result on the standard output.

## Story #2

I create Carnivorous, Herbivore abstract classes and Lion/Tiger/Coyote/Elephant/Giraffe/Antelope classes to hold biodiversity informations.
I also add two new methods :
- can_eat method to check if LivingEntity can eat other LivingEntity
- eat method to really do the eat action

Paddock.initialization method has been updated to allow Lion/Tiger/Coyote/Elephant/Giraffe/Antelope addition.
Adding specific error message in Paddock.run_simulation method when user enter negativ integer or to big integer (1095).

Merge instantiation and representation tests into one only test
Adding a lot of tests to cover all part of the code

## Story #3

Adding _is_alive attribute in LivingEntity. This attribute will be get using property is_alive (I prefer to old an information instead of remove eaten LivingEntity 
because in the next story we will introduce life point).
Adding gets_eaten method in LivingEntity. This method will be call when the current LivingEntity will be eaten by another LivingEntity
Change organization for eat method (that is now in Animal abstract class)
can_eat method is now define in all standard (not abstract) classes

Even if story doesn't give this information, I add an additional test in can_eat method to check if other_living_entity is alive

Update __repr__ method in Animal and Plant class to add emoji about is_alive information

Adding do_actions method in LivingEntity (abstract method). The method is implemented in Animal and Plant classes

Change line for Plant in create_report method (in order to count dead/alive plant separately)

Improve unit tests to manage dead/alive emoji in __repr__

Adding 3 tests to check non autophagy / animal cannot eat same species / animal cannot eat dead entity

## Story #4

Adding _life_point attribute in LivingEntity. This attribute will be get using property life_point. 
Adding check_PV(self) -> bool in LivingEntity. This method return a bool and update _is_alive attribute is needed (_life_point <=0 )
Update do_actions method in Animal / Plant classes

Adding constants to store integer about LV gained/losted during animal/plant eating
Display PV in __repr__

Update automatic tests
Adding one test about PV evolution during eating

## Story #5

Adding constants to store MIN, MAX age of living entity added
Adding grow_old method in LivingEntity that will be called from do_actions.
About the order of the event in do_actions : 
- First, we check if Animal/Plant is alive
- Second, we grow old the Animal/Plant
- Third, if Animal/Plant is always alive, we reduce his PV
- Fourth, .... the other processes (eating if PV <= 5 for animal, adding 1 PV by day for Plant)

To obtain reproducible behavior, during automatics tests, we set class variable testing_mode to True in order to create every LivingEntity with a
specific age.
When script is launched "in production", LivingEntity's age will be random (between MIN_AGE_FOR_ENTITY_ADDED and MAX_AGE_FOR_ENTITY_ADDED)

Update automatic tests
Adding tests about age managment

## Story #6

Update requirements.txt to add module names (this module allows random name generation)
Rename other_living_entity to other_living_entities in do_actions methods

Adding can_make_baby and make_baby methods in Animal class
Adding MIN_PV_TO_SPLIT_PLANT constant to hold min PV before a plant split into twice
do_actions method can return now a baby (or None most of the time)

We add new babies after doing actions for all existing entities (and not gradually)

Adding a new attribute for Animal to prevent baby boom (day_before_baby). Each time two animals make a baby. Time after baby attribute will be set to TIME_BEFORE_NEW_BABY (3)
Each day, this attribute will be decrease and before making a baby, two animals need to have day_before_baby==0

I have to remove type hint for can_make_baby and make_baby methods in Animal class. For other_living_entity parameter, if I set LivingEntity sex and day_before_baby
won't be here (for plant) and if I set Animal type hint, the problem will be in do_actions call (even if I add ' and isinstance(le, Animal)' at the end of comprehension list
to make a filter on Animal instance only...)

Add mypy.ini file to prevent error message of names library (used to find firstname of the baby)
Adding some automatic tests about baby (rules and "creation")

## Story #7

This story is missing, let's start Story #8

## Story #8

Adding remove_all_plants_and_all_animals in Paddock to clear list of all living entity
Adding 'l' and 's' commands during the initialization step to load / save a configuration. Load another configuration will remove all living entity before importing
living entity describe in JSON file

Adding two automatic tests to check in load/save operation work well
Adding try, except block to prevent IOError (filename is a directory, no right to write a file, ....)